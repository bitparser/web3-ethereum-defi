Development instructions
========================

Here are instructions for new developers how to get started with the development of `web3-ethereum-defi <https://github.com/tradingstrategy-ai/web3-ethereum-defi>`_ package.

Prerequisites
-------------

* You can program in Python
* You now how Git and Github work
* Linux or Mac recommended (We might not be able to support Windows users)

Checkout
--------

Check out the project locally:

.. code-block:: shell

    git clone git@github.com:tradingstrategy-ai/web3-ethereum-defi.git

We assume you use SSH keys with Github, but HTTPS checkout works as well.

Make sure you checkout the submodules, as we include Uniswap, Sushiswap and others as Git submodules:

.. code-block:: shell

   cd web3-ethereum-defi
   git submodule update --init --recursive

Install with Poetry
-------------------

`Install Poetry <https://python-poetry.org/docs/#installation>`_.

Install the project with Poetry in development mode:

.. code-block:: shell

    cd web3-ethereum-defi
    poetry shell  # Enter to Poetry/virtualenv enabled shell
    poetry install -E docs

Note that `-E docs` is important, otherwise Sphinx package won't be installed and you cannot build docs.

`Check instructions here if you need to change Python version from your default to Python 3.8+ <https://stackoverflow.com/questions/70064449/how-to-rebuild-poetry-environment-from-scratch-and-force-reinstall-everything/70064450#70064450>`_.

Ganache
-------

Some features require ganache, to install it.

First install Node / NPM:

.. code-block:: shell

     brew install node  # For macOS

Then install Ganache itself:

.. code-block:: shell

     npm install -g ganache

Make sure your Ganache is version 7+:

.. code-block:: shell

    ganache --version

::

    ganache v7.0.3 (@ganache/cli: 0.1.4, @ganache/core: 0.1.4)

Smoke test
----------

Check that the tests of unmodified master branch pass:

.. code-block:: shell

     pytest

You should get all green.

Some tests will be skipped, because they require full EVM nodes. JSON-ROPC needs to be configured through environment variables.

You can also run tests with logging enabled to get more information:

.. code-block:: shell

    pytest --tb=native --log-cli-level=info -x

This will

- Use native tracebacks

- Set console logging level to `INFO`

- Stop on the first failure

Pull requests
-------------

For new feature requests, make sure your pull request satisfies the checklist below and enjoy merge party.

Pull request quality checklist
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- ✅ The Python code passes `flake8 formatting conventions <https://flake8.pycqa.org/en/latest/>`_.
  Run `poetry run flake8` and you should get a clean output. Note that Github Action will complain on these
  when you open a pull request.
  (perhaps add instruction on how to add this as a pre-commit hook - it's fast and cheap and shouldn't be distracting)

- ✅ Every Python module has a sensible docstring in the format single line description + long description.
  See existing modules for examples.
  (NOTE: this check can - and should - be automated, i.e. checking for the existence and a valid format of the docstrings)

- ✅ Every Python function has a sensible docstring in the format single line description + long description.
  See existing modules for examples.
  (same as above, automate)

- ✅ Every Python function that library users call have their parameters documented.
  (I would require this even for internal helper functions/methods, makes the code easier to follow. Might loosen it up for very trivial functions,
   but would still reocmmend to at least annotate the parameter and return value types)

- ✅ Every Python function that library users call has a code example in the docstring.

- ✅ Every Python function has a unit test and unit test comes with a proper docstring.
  (It _might_ be an overhead docstringing the tests, too? Especially because a good test name is often enough to communnicate the specific
   case that is covered)

- ✅ Any new functions are added to the documentation. Run `cd docs && make clean html` and then open `docs/build/html/index.html`
  to view documentation locally. See existing Sphinx documentation for examples how to include your module in the autogenerated
  documentation.

- ✅ `CHANGELOG.md` contains a line for the change if it is a library user facing feature.

- [ ] The number of untested lines should NOT increase. In other words, new code must be covered by the corresponding unit tests.
      The check should be automated.

  IDEA: have this also in the PR template so that the authors/reviewers have a list of things to check)
  IDEA: have a pull request reminder bot that pings the reviewer(s) if a PR is stale for more than, say, 24 hours (holidays/weekends excluded)
       Can also have a leaderboard of a mean PR review response time, somewhat encourages people to review the PRs sooner :)


Rebuilding smart contract compilation artifacts
-----------------------------------------------

All smart contracts should be precompiled in the Github repository. If you need to recompile them, you need to have Gnu make.

You will need `yarn` in the additional to `npm`:

.. code-block:: shell

    npm install -g yarn

Get make:

.. code-block:: shell

    brew install make

Then you can run the command to recompile all the smart contracts:

.. code-block:: shell

    make all


